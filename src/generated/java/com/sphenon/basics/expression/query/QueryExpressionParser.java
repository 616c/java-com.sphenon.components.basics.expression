/* Generated By:JavaCC: Do not edit this line. QueryExpressionParser.java */
package com.sphenon.basics.expression.query;

import com.sphenon.basics.context.*;
import com.sphenon.basics.expression.returncodes.*;

import java.io.BufferedReader;
import java.io.StringReader;
import java.io.IOException;

import java.util.Vector;
import java.util.Map;
import java.util.HashMap;

public class QueryExpressionParser implements QueryExpressionParserConstants {

  static protected QueryExpressionParser parser;

  static protected QueryExpressionParser getParser(CallContext context, String string) throws ParseException {
      if (parser == null) {
          parser = new QueryExpressionParser(context, string);
      } else {
          parser.ReInit(context, string);
      }
      return parser;
  }

  static synchronized public QETerm parse(CallContext context, String string) throws ParseException {
      return getParser(context, string).QueryExpression(context);
  }

  protected QueryExpressionParser (CallContext context, String expression) {
      this(new BufferedReader(new StringReader(expression)));
  }

  protected void ReInit (CallContext context, String expression) {
      ReInit(new BufferedReader(new StringReader(expression)));
  }

  public String getPosition(CallContext context) {
      return   "[line "    + jj_input_stream.getBeginLine()
                           + (jj_input_stream.getBeginLine() != jj_input_stream.getEndLine() ? ("-" + jj_input_stream.getEndLine()) : "")
             + ", column " + jj_input_stream.getBeginColumn()
                           + (jj_input_stream.getBeginColumn() != jj_input_stream.getEndColumn() ? ("-" + jj_input_stream.getEndColumn()) : "")
             + "]";
  }

  protected Map<String,String> aliases;

  final public String Tag(CallContext context) throws ParseException {
                                    Token tag;
    jj_consume_token(HASH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      tag = jj_consume_token(INTEGER);
      break;
    case IDENTIFIER:
      tag = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        tag = jj_consume_token(INTEGER);
        break;
      case IDENTIFIER:
        tag = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }

    }
    {if (true) return tag.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Alias(CallContext context) throws ParseException {
                                      Token alias;
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      alias = jj_consume_token(INTEGER);
      break;
    case IDENTIFIER:
      alias = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return alias.image;}
    throw new Error("Missing return statement in function");
  }

  final public QEIdentifier PlainIdentifier(CallContext context) throws ParseException {
                                                      Token token;
    QEIdentifier qeid;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
                                       qeid = new QEIdentifier(context, token.image);
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL_1:
        token = jj_consume_token(STRING_LITERAL_1);
                                             qeid = new QEIdentifier(context, token.image.substring(1,token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c"));
        break;
      case STRING_LITERAL_2:
        token = jj_consume_token(STRING_LITERAL_2);
                                             qeid = new QEIdentifier(context, token.image.substring(1,token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c'", "'").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c"));
        break;
      case STRING_LITERAL_3:
        token = jj_consume_token(STRING_LITERAL_3);
                                             qeid = new QEIdentifier(context, token.image.substring(1,token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c}", "}").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c"));
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return qeid;}
    throw new Error("Missing return statement in function");
  }

  final public QEIdentifier TaggedIdentifier(CallContext context) throws ParseException {
                                                       String tag = null; String alias = null;
    QEIdentifier qeid = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case DOLLAR:
      qeid = PlainIdentifier(context);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        alias = Alias(context);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        tag = Tag(context);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case COLON:
      alias = Alias(context);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        tag = Tag(context);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case HASH:
      tag = Tag(context);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (qeid == null) {
      String id = null;
      if (alias != null) {
        id = this.aliases.get(alias);
        if (id == null) {
          {if (true) throw new ParseException("Alias is not defined: " + alias);}
        }
      }
      qeid = new QEIdentifier(context, id);
    } else {
      if (alias != null) {
        this.aliases.put(alias, qeid.getId(context));
      }
    }
    if (tag != null) { qeid.setTag(context, tag); }
    {if (true) return qeid;}
    throw new Error("Missing return statement in function");
  }

  final public String SignedInteger(CallContext context) throws ParseException {
                                              Token sign = null; Token number;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        sign = jj_consume_token(PLUS);
        break;
      case MINUS:
        sign = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    number = jj_consume_token(INTEGER);
    {if (true) return (sign == null ? "" : sign.image) + number.image;}
    throw new Error("Missing return statement in function");
  }

  final public String SignedNumber(CallContext context) throws ParseException {
                                             Token sign = null; Token number; Token decimal = null; Token exponent = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        sign = jj_consume_token(PLUS);
        break;
      case MINUS:
        sign = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    number = jj_consume_token(INTEGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
      decimal = jj_consume_token(DECIMAL);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPONENT:
      exponent = jj_consume_token(EXPONENT);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    {if (true) return (sign == null ? "" : sign.image) + number.image + (decimal == null ? "" : decimal.image) + (exponent == null ? "" : exponent.image);}
    throw new Error("Missing return statement in function");
  }

  final public QEBoundary Boundary(CallContext context) throws ParseException {
                                             String number = null; QEBoundary qeboundary;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case STAR:
    case PLUS:
    case MINUS:
    case HASH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
                                                             qeboundary = new QEBoundary(context, null                  , false);
        break;
      case INTEGER:
      case PLUS:
      case MINUS:
        number = SignedInteger(context);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
                                                              qeboundary = new QEBoundary(context, Long.parseLong(number), false);
        break;
      case HASH:
        jj_consume_token(HASH);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case PLUS:
        case MINUS:
          number = SignedInteger(context);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WS:
            jj_consume_token(WS);
            break;
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
                   qeboundary = new QEBoundary(context, number == null ? 0L : Long.parseLong(number), true );
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[30] = jj_gen;
                                                             qeboundary = new QEBoundary(context, null                  , false);
    }
    {if (true) return qeboundary;}
    throw new Error("Missing return statement in function");
  }

  final public QEQuantifier Quantifier(CallContext context) throws ParseException {
                                                 QEBoundary lower; QEBoundary upper;
    QEQuantifier qequantifier = new QEQuantifier(context);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
      jj_consume_token(FORALL);
                 qequantifier.setForAll(context);
      break;
    case EXISTS:
      jj_consume_token(EXISTS);
                 qequantifier.setExists(context);
      break;
    case OPBRK:
      jj_consume_token(OPBRK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      lower = Boundary(context);
                                      qequantifier.setLowerLimit(context, lower);
      jj_consume_token(ELL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      upper = Boundary(context);
                                      qequantifier.setUpperLimit(context, upper);
      jj_consume_token(CLBRK);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return qequantifier;}
    throw new Error("Missing return statement in function");
  }

  final public QEPath Path(CallContext context) throws ParseException {
                                     QEIdentifier qeid; QEQuantifier qequantifier;
    QEPath qepath = new QEPath(context);
    qeid = TaggedIdentifier(context);
                                           qepath.append(context, qeid);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
    case EXISTS:
    case OPBRK:
      qequantifier = Quantifier(context);
                                           qeid.setQuantifier(context, qequantifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      qeid = TaggedIdentifier(context);
                                         qepath.append(context, qeid);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORALL:
      case EXISTS:
      case OPBRK:
        qequantifier = Quantifier(context);
                                             qeid.setQuantifier(context, qequantifier);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    }
    {if (true) return qepath;}
    throw new Error("Missing return statement in function");
  }

  final public QEArray Array(CallContext context) throws ParseException {
                                       QEValue qevalue;
    QEArray qearray = new QEArray(context);
    jj_consume_token(OPBRK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case STRING_LITERAL_1:
    case STRING_LITERAL_2:
    case FORMAT_1:
    case FORMAT_2:
    case FORMAT_3:
    case FORMAT_4:
    case ISODATE:
    case ISOTIME:
    case INTEGER:
    case IDENTIFIER:
    case DOLLAR:
    case OPBRK:
    case COLON:
    case PLUS:
    case MINUS:
    case HASH:
      qevalue = Value(context);
                                 qearray.append(context, qevalue);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        qevalue = Value(context);
                                   qearray.append(context, qevalue);
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(CLBRK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    {if (true) return qearray;}
    throw new Error("Missing return statement in function");
  }

  final public QEValue Value(CallContext context) throws ParseException {
                                       QEValue qevalue; Token token; String number = null; Token isodate = null; Token isotime = null; Token isozone = null; Token format = null; Token formatted = null;
    String format_string;
    String formatted_string;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL_1:
      token = jj_consume_token(STRING_LITERAL_1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
                                                    qevalue = new QELiteral(context, token.image.substring(1,token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c"));
      break;
    case STRING_LITERAL_2:
      token = jj_consume_token(STRING_LITERAL_2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
                                                    qevalue = new QELiteral(context, token.image.substring(1,token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c'", "'").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c"));
      break;
    case INTEGER:
    case PLUS:
    case MINUS:
      number = SignedNumber(context);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
                                                    qevalue = new QENumber(context, number);
      break;
    case ISODATE:
    case ISOTIME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ISODATE:
        isodate = jj_consume_token(ISODATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ISOTIME:
          isotime = jj_consume_token(ISOTIME);
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        break;
      case ISOTIME:
        isotime = jj_consume_token(ISOTIME);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ISOZONE:
        isozone = jj_consume_token(ISOZONE);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
                                                    qevalue = new QEDateTime(context,
                                                                             isodate == null ? null : isodate.image,
                                                                             isotime == null ? null : isotime.image.startsWith("T") ? isotime.image.substring(1) : isotime.image,
                                                                             isozone == null ? null : isozone.image);
      break;
    case FORMAT_1:
    case FORMAT_2:
    case FORMAT_3:
    case FORMAT_4:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORMAT_1:
        format = jj_consume_token(FORMAT_1);
                                  format_string = format.image.substring(1,format.image.length()-1).replaceAll("\u005c\u005c\u3019", "\u3019").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c","\u005c\u005c");
        break;
      case FORMAT_2:
        format = jj_consume_token(FORMAT_2);
                                  format_string = format.image.substring(2,format.image.length()-1).replaceAll("\u005c\u005c)", ")").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c","\u005c\u005c");
        break;
      case FORMAT_3:
        format = jj_consume_token(FORMAT_3);
                                  format_string = format.image.substring(2,format.image.length()-1).replaceAll("\u005c\u005c}", "}").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c","\u005c\u005c");
        break;
      case FORMAT_4:
        format = jj_consume_token(FORMAT_4);
                                  format_string = format.image.substring(2,format.image.length()-1).replaceAll("\u005c\u005c]", "]").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c","\u005c\u005c");
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL_1:
        formatted = jj_consume_token(STRING_LITERAL_1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
                                                        formatted_string = formatted.image.substring(1,formatted.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c");
        break;
      case STRING_LITERAL_2:
        formatted = jj_consume_token(STRING_LITERAL_2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
                                                        formatted_string = formatted.image.substring(1,formatted.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c'", "'").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c");
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          Object value = com.sphenon.basics.format.Formatter.parse(context, format_string, formatted_string);
          qevalue = (value instanceof java.util.Date ? new QEDateTime(context, (java.util.Date) value) : new QENumber(context, (Number) value));
      break;
    case BOOLEAN:
      token = jj_consume_token(BOOLEAN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
                                                    qevalue = new QEBool(context, token.image);
      break;
    case OPBRK:
      qevalue = Array(context);
      break;
    case IDENTIFIER:
    case DOLLAR:
    case COLON:
    case HASH:
      qevalue = Path(context);

      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return qevalue;}
    throw new Error("Missing return statement in function");
  }

  final public QEObject Object(CallContext context) throws ParseException {
                                         QEObject qeobject; QETerm qeand;
    qeobject = new QEObject(context);
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case OP:
    case DOLLAR:
    case COLON:
    case HASH:
    case NOT:
      qeand = And(context);
                                             qeobject.setCondition(context, qeand);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(CL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    {if (true) return qeobject;}
    throw new Error("Missing return statement in function");
  }

  final public QECondition Condition(CallContext context) throws ParseException {
                                               QEPath qepath; QECondition qecondition; QEValue qevalue;
    qepath = Path(context);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEEqual(context, qevalue);
      break;
    case NEQ:
      jj_consume_token(NEQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QENotEqual(context, qevalue);
      break;
    case LT:
      jj_consume_token(LT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QELess(context, qevalue);
      break;
    case GT:
      jj_consume_token(GT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEGreater(context, qevalue);
      break;
    case LTE:
      jj_consume_token(LTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QELessEqual(context, qevalue);
      break;
    case GTE:
      jj_consume_token(GTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEGreaterEqual(context, qevalue);
      break;
    case RE:
      jj_consume_token(RE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEREMatch(context, qevalue);
      break;
    case FUZZY:
      jj_consume_token(FUZZY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEFuzzyMatch(context, qevalue);
      break;
    case NRE:
      jj_consume_token(NRE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QENotREMatch(context, qevalue);
      break;
    case ISA:
      jj_consume_token(ISA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QEIsA(context, qevalue);
      break;
    case NISA:
      jj_consume_token(NISA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      qevalue = Value(context);
                                                        qecondition = new QENotIsA(context, qevalue);
      break;
    case OP:
      qecondition = Object(context);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    try {
        {if (true) return QECondition.resolve(context, qepath, qecondition);}
    } catch (InvalidQueryExpression iqe) {
        {if (true) throw new ParseException("Cannot resolve path: " + iqe);}
    }
    throw new Error("Missing return statement in function");
  }

  final public QETerm Block(CallContext context) throws ParseException {
                                      QETerm qe;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case DOLLAR:
    case COLON:
    case HASH:
      qe = Condition(context);
      break;
    case OP:
      jj_consume_token(OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      qe = Or(context);
      jj_consume_token(CL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return qe;}
    throw new Error("Missing return statement in function");
  }

  final public QETerm Not(CallContext context) throws ParseException {
                                    QETerm qe;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      qe = Block(context);
                                               qe = new QENot(context, qe);
      break;
    case IDENTIFIER:
    case OP:
    case DOLLAR:
    case COLON:
    case HASH:
      qe = Block(context);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return qe;}
    throw new Error("Missing return statement in function");
  }

  final public QETerm And(CallContext context) throws ParseException {
                                    QETerm qe; QETerm qe2;
    QEAnd qeand = null;
    qe = Not(context);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      qe2 = Not(context);
                                            if (qeand == null) { qe = qeand = new QEAnd(context, qe); }
                                             qeand.append(context, qe2);
    }
    {if (true) return qe;}
    throw new Error("Missing return statement in function");
  }

  final public QETerm Or(CallContext context) throws ParseException {
                                   QETerm qe; QETerm qe2;
    QEOr qeor = null;
    qe = And(context);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      qe2 = And(context);
                                           if (qeor == null) { qe = qeor = new QEOr(context, qe); }
                                           qeor.append(context, qe2);
    }
    {if (true) return qe;}
    throw new Error("Missing return statement in function");
  }

  final public QETerm QueryExpression(CallContext context) throws ParseException {
                                                QETerm qe = null;
    this.aliases = new HashMap<String,String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case OP:
    case DOLLAR:
    case COLON:
    case HASH:
    case NOT:
      qe = Or(context);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    jj_consume_token(0);
    this.aliases = null;
    {if (true) return qe;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public QueryExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x102000,0x0,0x102000,0x102000,0x1c,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x8000,0x0,0x0,0x0,0x0,0x2000,0x2000,0x2000,0x0,0x0,0x40c0000,0x0,0x40c0000,0x0,0x0,0x0,0x40c0000,0x0,0x0,0x0,0x4902dee,0x0,0x0,0x0,0x0,0x800,0xc00,0x1000,0x0,0x1e0,0x0,0x0,0x0,0xc,0x0,0x4902dee,0x0,0xb00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0200000,0x0,0x0,0xb00000,0x0,0xb00000,0x10000,0x0,0x20000,0x0,0x0,0xb00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x800,0x0,0x0,0x0,0x0,0x80000,0x80000,0x400,0x80000,0x20000,0x80000,0x80000,0x20000,0x80000,0x20400,0x18000,0x80000,0x18000,0x18000,0x80000,0x18000,0x0,0x0,0x80000,0x80000,0x80000,0x80000,0x18000,0x3c000,0x3c000,0x80000,0x80000,0x0,0x80000,0x0,0x2000,0x80000,0x80000,0x0,0x80000,0x1000,0x80000,0x38400,0x80000,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x80000,0x0,0x80000,0x80000,0x80000,0x0,0x80000,0x38400,0x80000,0x60400,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x80000,0x3f8,0x80000,0x80000,0x20400,0x80000,0x60400,0x0,0x80000,0x0,0x80000,0x80000,0x60400,};
   }

  /** Constructor with InputStream. */
  public QueryExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public QueryExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public QueryExpressionParser(QueryExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QueryExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
