/* Generated By:JavaCC: Do not edit this line. QueryExpressionParserConstants.java */
package com.sphenon.basics.expression.query;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOOLEAN = 1;
  /** RegularExpression Id. */
  int STRING_LITERAL_1 = 2;
  /** RegularExpression Id. */
  int STRING_LITERAL_2 = 3;
  /** RegularExpression Id. */
  int STRING_LITERAL_3 = 4;
  /** RegularExpression Id. */
  int FORMAT_1 = 5;
  /** RegularExpression Id. */
  int FORMAT_2 = 6;
  /** RegularExpression Id. */
  int FORMAT_3 = 7;
  /** RegularExpression Id. */
  int FORMAT_4 = 8;
  /** RegularExpression Id. */
  int D = 9;
  /** RegularExpression Id. */
  int ISODATE = 10;
  /** RegularExpression Id. */
  int ISOTIME = 11;
  /** RegularExpression Id. */
  int ISOZONE = 12;
  /** RegularExpression Id. */
  int INTEGER = 13;
  /** RegularExpression Id. */
  int DECIMAL = 14;
  /** RegularExpression Id. */
  int EXPONENT = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int OR = 17;
  /** RegularExpression Id. */
  int FORALL = 18;
  /** RegularExpression Id. */
  int EXISTS = 19;
  /** RegularExpression Id. */
  int IDENTIFIER = 20;
  /** RegularExpression Id. */
  int OP = 21;
  /** RegularExpression Id. */
  int CL = 22;
  /** RegularExpression Id. */
  int DOLLAR = 23;
  /** RegularExpression Id. */
  int OPBRC = 24;
  /** RegularExpression Id. */
  int CLBRC = 25;
  /** RegularExpression Id. */
  int OPBRK = 26;
  /** RegularExpression Id. */
  int CLBRK = 27;
  /** RegularExpression Id. */
  int LT = 28;
  /** RegularExpression Id. */
  int GT = 29;
  /** RegularExpression Id. */
  int LTE = 30;
  /** RegularExpression Id. */
  int GTE = 31;
  /** RegularExpression Id. */
  int OPQ = 32;
  /** RegularExpression Id. */
  int CLQ = 33;
  /** RegularExpression Id. */
  int ELL = 34;
  /** RegularExpression Id. */
  int EQ = 35;
  /** RegularExpression Id. */
  int NEQ = 36;
  /** RegularExpression Id. */
  int FUZZY = 37;
  /** RegularExpression Id. */
  int RE = 38;
  /** RegularExpression Id. */
  int NRE = 39;
  /** RegularExpression Id. */
  int ISA = 40;
  /** RegularExpression Id. */
  int NISA = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int DOT = 45;
  /** RegularExpression Id. */
  int STAR = 46;
  /** RegularExpression Id. */
  int PLUS = 47;
  /** RegularExpression Id. */
  int MINUS = 48;
  /** RegularExpression Id. */
  int HASH = 49;
  /** RegularExpression Id. */
  int NOT = 50;
  /** RegularExpression Id. */
  int WS = 51;
  /** RegularExpression Id. */
  int ANY = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<BOOLEAN>",
    "<STRING_LITERAL_1>",
    "<STRING_LITERAL_2>",
    "<STRING_LITERAL_3>",
    "<FORMAT_1>",
    "<FORMAT_2>",
    "<FORMAT_3>",
    "<FORMAT_4>",
    "<D>",
    "<ISODATE>",
    "<ISOTIME>",
    "<ISOZONE>",
    "<INTEGER>",
    "<DECIMAL>",
    "<EXPONENT>",
    "<AND>",
    "<OR>",
    "<FORALL>",
    "<EXISTS>",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"$\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "<LTE>",
    "<GTE>",
    "\"\\u00ab\"",
    "\"\\u00bb\"",
    "<ELL>",
    "<EQ>",
    "<NEQ>",
    "<FUZZY>",
    "<RE>",
    "<NRE>",
    "<ISA>",
    "<NISA>",
    "\":\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"*\"",
    "\"+\"",
    "\"-\"",
    "\"#\"",
    "<NOT>",
    "<WS>",
    "<ANY>",
  };

}
