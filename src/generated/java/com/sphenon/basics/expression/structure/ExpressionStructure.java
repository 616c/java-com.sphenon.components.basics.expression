/* Generated By:JavaCC: Do not edit this line. ExpressionStructure.java */
package com.sphenon.basics.expression.structure;

import com.sphenon.basics.context.*;
import com.sphenon.basics.expression.*;
import com.sphenon.basics.expression.classes.*;

import java.io.BufferedReader;
import java.io.StringReader;
import java.io.Reader;
import java.io.Writer;
import java.io.IOException;
import java.util.Vector;

public class ExpressionStructure implements ExpressionStructureConstants {

  static protected ExpressionStructure parser;

  static synchronized public Vector parse(CallContext context, String string) throws ParseException {
      if (parser == null) {
          parser = new ExpressionStructure(context, string);
      } else {
          parser.ReInit(context, string);
      }
      return parser.Expression(context);
  }

  public ExpressionStructure (CallContext context, String expression) {
      this(new BufferedReader(new StringReader(expression)));
  }

  public void ReInit (CallContext context, String expression) {
      ReInit(new BufferedReader(new StringReader(expression)));
  }

  public String getPosition(CallContext context) {
      return   "[line "    + jj_input_stream.getBeginLine()
                           + (jj_input_stream.getBeginLine() != jj_input_stream.getEndLine() ? ("-" + jj_input_stream.getEndLine()) : "")
             + ", column " + jj_input_stream.getBeginColumn()
                           + (jj_input_stream.getBeginColumn() != jj_input_stream.getEndColumn() ? ("-" + jj_input_stream.getEndColumn()) : "")
             + "]";
  }

/*
    | <ESLASH       : "\\/"   >
...
    | token=<ESLASH>     { value.append("/"); }
*/
  final public void Any(CallContext context, StringBuffer value) throws ParseException {
                                                      Token token;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
        token = jj_consume_token(BACKSL);
                           value.append("\u005c\u005c");
        break;
      case EBTICK:
        token = jj_consume_token(EBTICK);
                           value.append("`");
        break;
      case SLASHSTAR:
        token = jj_consume_token(SLASHSTAR);
                           value.append("/*");
        break;
      case STARSLASH:
        token = jj_consume_token(STARSLASH);
                           value.append("*/");
        break;
      case ANY:
        token = jj_consume_token(ANY);
                           value.append(token.image);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
      case EBTICK:
      case SLASHSTAR:
      case STARSLASH:
      case ANY:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public StringBuffer CommentBE(CallContext context, StringBuffer value) throws ParseException {
                                                                    Token token;
    if (value == null) { value = new StringBuffer(); }
    jj_consume_token(CMTB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACKSL:
    case EBTICK:
    case SLASHSTAR:
    case STARSLASH:
    case ANY:
      Any(context, value);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CMTB:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      CommentBE(context, value);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
      case EBTICK:
      case SLASHSTAR:
      case STARSLASH:
      case ANY:
        Any(context, value);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    }
    jj_consume_token(CMTE);
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public StringBuffer ArgumentBE(CallContext context, StringBuffer value, boolean outmost) throws ParseException {
                                                                                      Token token;
    if (value == null) { value = new StringBuffer(); }
    token = jj_consume_token(ARGB);
                   if (outmost == false) { value.append(token.image); }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACKSL:
    case EBTICK:
    case SLASHSTAR:
    case STARSLASH:
    case ANY:
      Any(context, value);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGB:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      ArgumentBE(context, value, false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
      case EBTICK:
      case SLASHSTAR:
      case STARSLASH:
      case ANY:
        Any(context, value);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    }
    token = jj_consume_token(ARGE);
                   if (outmost == false) { value.append(token.image); }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public StringBuffer Argument(CallContext context, StringBuffer value) throws ParseException {
                                                                   Token token;
    if (value == null) { value = new StringBuffer(); }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARG:
      jj_consume_token(ARG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
      case EBTICK:
      case SLASHSTAR:
      case STARSLASH:
      case ANY:
        Any(context, value);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGB:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        ArgumentBE(context, value, false);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BACKSL:
        case EBTICK:
        case SLASHSTAR:
        case STARSLASH:
        case ANY:
          Any(context, value);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      }
      jj_consume_token(ARG);
      break;
    case ARGB:
      ArgumentBE(context, value, true);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Expression(CallContext context) throws ParseException {
                                           Token token;
    StringBuffer c = new StringBuffer();
    StringBuffer a;
    int ai = 1;
    Vector ese = new Vector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACKSL:
    case EBTICK:
    case SLASHSTAR:
    case STARSLASH:
    case ANY:
      Any(context, c);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
                            ese.add(new Class_ExpressionSourceEntry(context, c.toString()));
                            c.setLength(0);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARG:
      case CMTB:
      case ARGB:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARG:
      case ARGB:
        a = Argument(context, null);
                                        String argument = a.toString();
                                        ese.add(new Class_ExpressionSourceEntry(context, "Argument" + ai++, argument));
                                        a.setLength(0);
        break;
      case CMTB:
        CommentBE(context, null);

        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BACKSL:
      case EBTICK:
      case SLASHSTAR:
      case STARSLASH:
      case ANY:
        Any(context, c);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
                              ese.add(new Class_ExpressionSourceEntry(context, c.toString()));
                              c.setLength(0);
    }
    jj_consume_token(0);
    {if (true) return ese;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ExpressionStructureTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7c0,0x7c0,0x7c0,0x4,0x7c0,0x7c0,0x10,0x7c0,0x7c0,0x10,0x7c0,0x12,0x7c0,0x16,0x16,0x7c0,};
   }

  /** Constructor with InputStream. */
  public ExpressionStructure(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionStructure(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionStructureTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExpressionStructure(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionStructureTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpressionStructure(ExpressionStructureTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionStructureTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
