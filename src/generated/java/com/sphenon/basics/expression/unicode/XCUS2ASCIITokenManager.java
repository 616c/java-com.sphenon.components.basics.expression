/* Generated By:JavaCC: Do not edit this line. XCUS2ASCIITokenManager.java */
package com.sphenon.basics.expression.unicode;
import com.sphenon.basics.context.*;
import com.sphenon.basics.expression.*;
import com.sphenon.basics.expression.classes.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.Reader;
import java.io.Writer;
import java.io.IOException;

/** Token Manager. */
public class XCUS2ASCIITokenManager implements XCUS2ASCIIConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000L) != 0L)
            return 17;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 92:
         return jjStopAtPos(0, 76);
      case 96:
         return jjStopAtPos(0, 75);
      case 750:
         return jjStopAtPos(0, 55);
      case 8214:
         return jjStopAtPos(0, 19);
      case 8230:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x2cL, 0x0L);
      case 8252:
         return jjStopAtPos(0, 68);
      case 8258:
         return jjStopAtPos(0, 33);
      case 8279:
         return jjStopAtPos(0, 51);
      case 8719:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 8721:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 8743:
         return jjStopAtPos(0, 47);
      case 8744:
         return jjStopAtPos(0, 46);
      case 8801:
         return jjStopAtPos(0, 36);
      case 8826:
         return jjStopAtPos(0, 48);
      case 8827:
         return jjStopAtPos(0, 49);
      case 8847:
         return jjStopAtPos(0, 69);
      case 8848:
         return jjStopAtPos(0, 70);
      case 8880:
         return jjStopAtPos(0, 15);
      case 8881:
         return jjStopAtPos(0, 16);
      case 8942:
         return jjStopAtPos(0, 6);
      case 8960:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 8983:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 8984:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x0L);
      case 8986:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 9022:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 9094:
         return jjStopAtPos(0, 32);
      case 9113:
         return jjStopAtPos(0, 31);
      case 9166:
         return jjStopAtPos(0, 77);
      case 9216:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 9399:
         return jjStopAtPos(0, 20);
      case 9407:
         return jjStopAtPos(0, 23);
      case 9412:
         return jjStopAtPos(0, 24);
      case 9413:
         return jjStopAtPos(0, 25);
      case 9416:
         return jjStartNfaWithStates_0(0, 21, 17);
      case 9418:
         return jjStopAtPos(0, 26);
      case 9426:
         return jjStopAtPos(0, 29);
      case 9428:
         return jjStopAtPos(0, 28);
      case 9439:
         return jjStopAtPos(0, 27);
      case 9442:
         return jjStopAtPos(0, 22);
      case 9656:
         return jjStopAtPos(0, 18);
      case 9666:
         return jjStopAtPos(0, 17);
      case 9672:
         return jjStopAtPos(0, 7);
      case 9852:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 9880:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 9889:
         return jjStopAtPos(0, 44);
      case 10004:
         return jjStopAtPos(0, 53);
      case 10008:
         return jjStopAtPos(0, 54);
      case 10060:
         return jjStopAtPos(0, 35);
      case 10062:
         return jjStopAtPos(0, 34);
      case 10067:
         return jjStopAtPos(0, 30);
      case 10096:
         return jjStopAtPos(0, 71);
      case 10097:
         return jjStopAtPos(0, 72);
      case 10214:
         return jjStopAtPos(0, 67);
      case 10514:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 10515:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 10521:
         return jjStopAtPos(0, 42);
      case 10522:
         return jjStopAtPos(0, 43);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 40:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 42:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 43:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 46:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 47:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 8279:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 8984:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(2, 3);
         break;
      case 40:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x400L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x80000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffefffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0x10000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x10000000L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x200L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x40L, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x4000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x40000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0x100L
};
static final long[] jjbitVec14 = {
   0x2000000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x0L, 0x40L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0x100002200L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(7);
                  break;
               case 17:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 3:
                  jjAddStates(0, 2);
                  break;
               case 9:
                  if (curChar == 63 && kind > 12)
                     kind = 12;
                  break;
               case 18:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 19:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 20:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(13);
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 6);
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 8);
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 10:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 12:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 59)
                     kind = 59;
                  break;
               case 14:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 60)
                     kind = 60;
                  break;
               case 16:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 6);
                  break;
               case 21:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 8);
                  break;
               case 22:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(13);
                  break;
               case 23:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 60)
                     kind = 60;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 85);
      case 39:
         return jjStopAtPos(0, 86);
      case 60:
         return jjStopAtPos(0, 81);
      case 62:
         return jjStopAtPos(0, 82);
      case 91:
         return jjStopAtPos(0, 79);
      case 93:
         return jjStopAtPos(0, 80);
      case 123:
         return jjStopAtPos(0, 87);
      case 167:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 167:
         return jjStopAtPos(0, 92);
      case 9403:
         return jjStopAtPos(0, 96);
      case 9413:
         return jjStopAtPos(0, 94);
      case 9416:
         return jjStopAtPos(0, 97);
      case 9421:
         return jjStopAtPos(0, 93);
      case 10022:
         return jjStopAtPos(0, 95);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 98)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 90);
      case 9403:
         return jjStopAtPos(0, 96);
      case 9413:
         return jjStopAtPos(0, 94);
      case 9416:
         return jjStopAtPos(0, 97);
      case 9421:
         return jjStopAtPos(0, 93);
      case 10022:
         return jjStopAtPos(0, 95);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 98)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 91);
      case 9403:
         return jjStopAtPos(0, 96);
      case 9413:
         return jjStopAtPos(0, 94);
      case 9416:
         return jjStopAtPos(0, 97);
      case 9421:
         return jjStopAtPos(0, 93);
      case 10022:
         return jjStopAtPos(0, 95);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 98)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 89);
      case 9403:
         return jjStopAtPos(0, 96);
      case 9413:
         return jjStopAtPos(0, 94);
      case 9416:
         return jjStopAtPos(0, 97);
      case 9421:
         return jjStopAtPos(0, 93);
      case 10022:
         return jjStopAtPos(0, 95);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 98)
                     kind = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 60:
         return jjStopAtPos(0, 99);
      case 62:
         return jjStopAtPos(0, 100);
      case 91:
         return jjStopAtPos(0, 101);
      case 93:
         return jjStopAtPos(0, 102);
      case 750:
         return jjStopAtPos(0, 104);
      case 10215:
         return jjStopAtPos(0, 103);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   3, 4, 6, 17, 18, 19, 20, 22, 23, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 36:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 35:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 35:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 43:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 36:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 216:
         return ((jjbitVec14[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 220:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\u2026\12", "\u2026\53\12", "\u2026", "\u2026\53", "\u22ee", 
"\u25c8", null, null, "\12", null, null, null, null, "\u22b0", "\u22b1", "\u25c2", 
"\u25b8", "\u2016", "\u24b7", "\u24c8", "\u24e2", "\u24bf", "\u24c4", "\u24c5", 
"\u24ca", "\u24df", "\u24d4", "\u24d2", "\u2753", "\u2399", "\u2386", "\u2042", 
"\u274e", "\u274c", "\u2261", "\u2318\u2318\50", "\u2318\50", "\u2318\56", "\u2318", 
"\u2698\50", "\u2919", "\u291a", "\u26a1", "\u267c\50", "\u2228", "\u2227", "\u227a", 
"\u227b", "\u2400\u2057", "\u2057", "\u2400", "\u2714", "\u2718", "\u02ee", "\u231a\50", 
"\u233e\50", "\u231a", null, null, "\u2317\50", "\u2300\50", "\u220f\50", "\u2211\50", 
"\u2913\50", "\u2912\50", "\u27e6", "\u203c", "\u228f", "\u2290", "\u2770", "\u2771", 
"\57\52", "\52\57", "\140", "\134", "\u23ce", null, "\133", "\135", "\74", "\76", null, 
null, "\42", "\47", "\173", "\247", "\42", "\47", "\175", "\247", "\u24cd", 
"\u24c5", "\u2726", "\u24bb", "\u24c8", null, "\74", "\76", "\133", "\135", "\u27e7", 
"\u02ee", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_OORL",
   "IN_ODELDQ",
   "IN_ODELSQ",
   "IN_ODELBC",
   "IN_ODELPA",
   "IN_EXPR",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 0, -1, -1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[24];
private final int[] jjstateSet = new int[48];
protected char curChar;
/** Constructor. */
public XCUS2ASCIITokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public XCUS2ASCIITokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 78)
       {
          jjmatchedKind = 78;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       if (jjmatchedPos == 0 && jjmatchedKind > 105)
       {
          jjmatchedKind = 105;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
