/* Generated By:JavaCC: Do not edit this line. ExceptionMatcher.java */
package com.sphenon.basics.expression.ematcher;

import com.sphenon.basics.context.*;
import com.sphenon.basics.exception.*;
import com.sphenon.basics.encoding.*;
import com.sphenon.basics.customary.*;
import com.sphenon.basics.configuration.*;
import com.sphenon.basics.cache.*;

import java.io.BufferedReader;
import java.io.StringReader;
import java.io.IOException;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class ExceptionMatcher implements ExceptionMatcherConstants {

  static protected ExceptionMatcher parser;

  static protected ExceptionMatcher getParser(CallContext context, String string) throws ParseException {
      if (parser == null) {
          parser = new ExceptionMatcher(context, string);
      } else {
          parser.ReInit(context, string);
      }
      return parser;
  }

  // used in StateComplexCondition for state expressions
  static synchronized public EMatcher parse(CallContext context, String string) {
      try {
          return getParser(context, string).EMEOF(context);
      } catch (ParseException pe) {
          CustomaryContext.create((Context)context).throwConfigurationError(context, pe, "Invalid exception handling matcher: '%(matcher)'", "matcher", string);
          throw (ExceptionConfigurationError) null; // compiler insists
      }
  }

  public ExceptionMatcher (CallContext context, String expression) {
      this(new BufferedReader(new StringReader(expression)));
  }

  public void ReInit (CallContext context, String expression) {
      ReInit(new BufferedReader(new StringReader(expression)));
  }

  public String getPosition(CallContext context) {
      return   "[line "    + jj_input_stream.getBeginLine()
                           + (jj_input_stream.getBeginLine() != jj_input_stream.getEndLine() ? ("-" + jj_input_stream.getEndLine()) : "")
             + ", column " + jj_input_stream.getBeginColumn()
                           + (jj_input_stream.getBeginColumn() != jj_input_stream.getEndColumn() ? ("-" + jj_input_stream.getEndColumn()) : "")
             + "]";
  }

  final public String QuotedString() throws ParseException {
                          Token token;
    String string = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL_1:
      token = jj_consume_token(STRING_LITERAL_1);
                                     string = token.image.substring(1, token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c"").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c");
      break;
    case STRING_LITERAL_2:
      token = jj_consume_token(STRING_LITERAL_2);
                                     string = token.image.substring(1, token.image.length()-1).replaceAll("\u005c\u005c\u005c\u005c'", "'").replaceAll("\u005c\u005cn","\u005cn").replaceAll("\u005c\u005c\u005c\u005c\u005c\u005c\u005c\u005c","\u005c\u005c\u005c\u005c");
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return string;}
    throw new Error("Missing return statement in function");
  }

  final public String DottedIdentifier() throws ParseException {
                              Token token; Token sep = null; String result; String postfix = null;
    token = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      sep = jj_consume_token(DOT);
      postfix = DottedIdentifier();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                                                                    result = token.image + (postfix == null ? "" : (sep.image + postfix));
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int Number() throws ParseException {
                 Token token;
    token = jj_consume_token(NUMBER);
    {if (true) return Integer.parseInt(token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Classes Cs(CallContext context, ArrayList<Class> classes) throws ParseException {
                                                              String c;
    if (classes == null) { classes = new ArrayList<Class>(); }
    c = DottedIdentifier();
                                 try { classes.add(ClassCache.getClassForName(context, c));
                                     } catch (ClassNotFoundException cnfe) {
                                       {if (true) throw new ParseException("Class " + c + " in exception handler matcher does not exist");}
                                 }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      Cs(context, classes);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    {if (true) return new Classes(classes.toArray(new Class[0]));}
    throw new Error("Missing return statement in function");
  }

  final public CMatcher CM(CallContext context, ArrayList<CMatcher> child_matchers) throws ParseException {
                                                                         CMatcher cm;
    EMatcher sequence_matcher  = null;
    int      minimum_depth     = 0;
    int      maximum_depth     = 0;
    EMatcher exception_matcher = null;
    int      minimum_childs    = 1;
    int      maximum_childs    = -1;
    boolean  toplevel          = (child_matchers == null ? true : false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPBRC:
      jj_consume_token(OPBRC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        minimum_childs = Number();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          maximum_childs = Number();
          break;
        case STAR:
          jj_consume_token(STAR);
                              maximum_childs = -1;
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CLBRC);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPBRK:
      jj_consume_token(OPBRK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        minimum_depth = Number();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          maximum_depth = Number();
          break;
        case STAR:
          jj_consume_token(STAR);
                              maximum_depth = -1;
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(CLBRK);
      sequence_matcher = EM(context);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      jj_consume_token(SLASH);
      exception_matcher = EM(context);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
                                                                              if (child_matchers == null) {
                                                                                  child_matchers = new ArrayList<CMatcher>(); }
      CM(context, child_matchers);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    cm = new CMatcher(sequence_matcher, minimum_depth, maximum_depth, exception_matcher, minimum_childs, maximum_childs);
    if (child_matchers != null) {
      child_matchers.add(0, cm);
      if (toplevel) {
        cm = new CMatcher(child_matchers.toArray(new CMatcher[0]));
      } else {
        cm = null;
      }
    }
    {if (true) return cm;}
    throw new Error("Missing return statement in function");
  }

  final public EMatcher EM(CallContext context) throws ParseException {
                                     EMatcher em;
    Classes  classes_include = null;
    Classes  classes_exclude = null;
    String   message_include = null;
    String   message_exclude = null;
    CMatcher child_matcher   = null;
    String   message         = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      classes_include = Cs(context, null);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      classes_exclude = Cs(context, null);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RE:
      jj_consume_token(RE);
      message_include = QuotedString();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NRE:
      jj_consume_token(NRE);
      message_exclude = QuotedString();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      message = QuotedString();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      jj_consume_token(OP);
      child_matcher = CM(context, null);
      jj_consume_token(CL);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    em = new EMatcher(classes_include,
                      classes_exclude,
                      child_matcher,
                      Encoding.recode(context, message, Encoding.URI, Encoding.UTF8),
                      Encoding.recode(context, message_include, Encoding.URI, Encoding.UTF8),
                      Encoding.recode(context, message_exclude, Encoding.URI, Encoding.UTF8)
                      );
    {if (true) return em;}
    throw new Error("Missing return statement in function");
  }

  final public EMatcher EMEOF(CallContext context) throws ParseException {
                                        EMatcher em;
    em = EM(context);
    jj_consume_token(0);
    {if (true) return em;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ExceptionMatcherTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc,0x40000,0x20,0x10,0x20010,0x20010,0x800,0x10,0x20010,0x20010,0x2000,0x80000,0x100000,0x2,0x40,0x80,0x100,0x10000,0x200,};
   }

  /** Constructor with InputStream. */
  public ExceptionMatcher(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExceptionMatcher(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExceptionMatcherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExceptionMatcher(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExceptionMatcherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExceptionMatcher(ExceptionMatcherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExceptionMatcherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
