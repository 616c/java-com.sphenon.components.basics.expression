/* Generated By:JavaCC: Do not edit this line. BashPromptObserverTokenManager.java */
package com.sphenon.basics.expression.bashprompt;
import com.sphenon.basics.context.*;
import java.io.Reader;
import java.io.Writer;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.IOException;

/** Token Manager. */
public class BashPromptObserverTokenManager implements BashPromptObserverConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x2L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x2L);
      default :
         return 11;
   }
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa12_0(active0, 0x2L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      default :
         return 14;
   }
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa15_0(active0, 0x2L);
      default :
         return 15;
   }
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa16_0(active0, 0x2L);
      default :
         return 16;
   }
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa17_0(active0, 0x2L);
      default :
         return 17;
   }
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa18_0(active0, 0x2L);
      default :
         return 18;
   }
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa19_0(active0, 0x2L);
      default :
         return 19;
   }
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa20_0(active0, 0x2L);
      default :
         return 20;
   }
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa21_0(active0, 0x2L);
      default :
         return 21;
   }
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa22_0(active0, 0x2L);
      default :
         return 22;
   }
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 22;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 22;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa23_0(active0, 0x2L);
      default :
         return 23;
   }
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 23;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 23;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa24_0(active0, 0x2L);
      default :
         return 24;
   }
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 24;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 24;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa25_0(active0, 0x2L);
      default :
         return 25;
   }
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 25;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 25;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa26_0(active0, 0x2L);
      default :
         return 26;
   }
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 26;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 26;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa27_0(active0, 0x2L);
      default :
         return 27;
   }
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 27;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 27;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa28_0(active0, 0x2L);
      default :
         return 28;
   }
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 28;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 28;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa29_0(active0, 0x2L);
      default :
         return 29;
   }
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 29;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 29;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa30_0(active0, 0x2L);
      default :
         return 30;
   }
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 30;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 30;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa31_0(active0, 0x2L);
      default :
         return 31;
   }
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 31;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 31;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa32_0(active0, 0x2L);
      default :
         return 32;
   }
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 32;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 32;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa33_0(active0, 0x2L);
      default :
         return 33;
   }
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 33;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 33;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa34_0(active0, 0x2L);
      default :
         return 34;
   }
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 34;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 34;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa35_0(active0, 0x2L);
      default :
         return 35;
   }
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 35;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 35;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa36_0(active0, 0x2L);
      default :
         return 36;
   }
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 36;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 36;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa37_0(active0, 0x2L);
      default :
         return 37;
   }
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 37;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 37;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa38_0(active0, 0x2L);
      default :
         return 38;
   }
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 38;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 38;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa39_0(active0, 0x2L);
      default :
         return 39;
   }
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 39;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 39;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa40_0(active0, 0x2L);
      default :
         return 40;
   }
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 40;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 40;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa41_0(active0, 0x2L);
      default :
         return 41;
   }
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 41;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 41;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa42_0(active0, 0x2L);
      default :
         return 42;
   }
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 42;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 42;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa43_0(active0, 0x2L);
      default :
         return 43;
   }
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 43;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 43;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa44_0(active0, 0x2L);
      default :
         return 44;
   }
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 44;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 44;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa45_0(active0, 0x2L);
      default :
         return 45;
   }
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 45;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 45;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa46_0(active0, 0x2L);
      default :
         return 46;
   }
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 46;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 46;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa47_0(active0, 0x2L);
      default :
         return 47;
   }
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 47;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 47;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa48_0(active0, 0x2L);
      default :
         return 48;
   }
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 48;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 48;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa49_0(active0, 0x2L);
      default :
         return 49;
   }
}
private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 49;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 49;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa50_0(active0, 0x2L);
      default :
         return 50;
   }
}
private int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 50;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 50;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa51_0(active0, 0x2L);
      default :
         return 51;
   }
}
private int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 51;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 51;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa52_0(active0, 0x2L);
      default :
         return 52;
   }
}
private int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 52;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 52;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa53_0(active0, 0x2L);
      default :
         return 53;
   }
}
private int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 53;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 53;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa54_0(active0, 0x2L);
      default :
         return 54;
   }
}
private int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 54;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 54;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(54, 1);
         break;
      default :
         return 55;
   }
   return 55;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", 
"\102\141\163\150\120\162\157\155\160\164\137\60\63\70\71\64\67\62\65\64\67\65\71\66\71\63\67\62\66\62\65\66\64\67\65\71\65\60\63\71\62\63\67\62\65\66\63\66\64\70\65\71\65\71\60", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[0];
private final int[] jjstateSet = new int[0];
protected char curChar;
/** Constructor. */
public BashPromptObserverTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public BashPromptObserverTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 2)
   {
      jjmatchedKind = 2;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
