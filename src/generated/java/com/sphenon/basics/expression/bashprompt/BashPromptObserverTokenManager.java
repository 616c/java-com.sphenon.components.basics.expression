/* Generated By:JavaCC: Do not edit this line. BashPromptObserverTokenManager.java */

/****************************************************************************
  Copyright 2001-2018 Sphenon GmbH

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations
  under the License.
*****************************************************************************/
package com.sphenon.basics.expression.bashprompt;
import com.sphenon.basics.context.*;
import java.io.Reader;
import java.io.Writer;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.IOException;

public class BashPromptObserverTokenManager implements BashPromptObserverConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      default :
         return 6;
   }
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      default :
         return 7;
   }
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      default :
         return 8;
   }
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x2L);
      default :
         return 9;
   }
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2L);
      default :
         return 10;
   }
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x2L);
      default :
         return 11;
   }
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa12_0(active0, 0x2L);
      default :
         return 12;
   }
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      default :
         return 13;
   }
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      default :
         return 14;
   }
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa15_0(active0, 0x2L);
      default :
         return 15;
   }
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa16_0(active0, 0x2L);
      default :
         return 16;
   }
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa17_0(active0, 0x2L);
      default :
         return 17;
   }
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa18_0(active0, 0x2L);
      default :
         return 18;
   }
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa19_0(active0, 0x2L);
      default :
         return 19;
   }
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa20_0(active0, 0x2L);
      default :
         return 20;
   }
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa21_0(active0, 0x2L);
      default :
         return 21;
   }
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa22_0(active0, 0x2L);
      default :
         return 22;
   }
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 22;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 22;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa23_0(active0, 0x2L);
      default :
         return 23;
   }
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 23;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 23;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa24_0(active0, 0x2L);
      default :
         return 24;
   }
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 24;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 24;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa25_0(active0, 0x2L);
      default :
         return 25;
   }
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 25;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 25;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa26_0(active0, 0x2L);
      default :
         return 26;
   }
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 26;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 26;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa27_0(active0, 0x2L);
      default :
         return 27;
   }
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 27;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 27;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa28_0(active0, 0x2L);
      default :
         return 28;
   }
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 28;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 28;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa29_0(active0, 0x2L);
      default :
         return 29;
   }
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 29;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 29;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa30_0(active0, 0x2L);
      default :
         return 30;
   }
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 30;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 30;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa31_0(active0, 0x2L);
      default :
         return 31;
   }
}
private final int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 31;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 31;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa32_0(active0, 0x2L);
      default :
         return 32;
   }
}
private final int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 32;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 32;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa33_0(active0, 0x2L);
      default :
         return 33;
   }
}
private final int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 33;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 33;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa34_0(active0, 0x2L);
      default :
         return 34;
   }
}
private final int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 34;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 34;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa35_0(active0, 0x2L);
      default :
         return 35;
   }
}
private final int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 35;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 35;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa36_0(active0, 0x2L);
      default :
         return 36;
   }
}
private final int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 36;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 36;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa37_0(active0, 0x2L);
      default :
         return 37;
   }
}
private final int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 37;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 37;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa38_0(active0, 0x2L);
      default :
         return 38;
   }
}
private final int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 38;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 38;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa39_0(active0, 0x2L);
      default :
         return 39;
   }
}
private final int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 39;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 39;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa40_0(active0, 0x2L);
      default :
         return 40;
   }
}
private final int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 40;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 40;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa41_0(active0, 0x2L);
      default :
         return 41;
   }
}
private final int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 41;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 41;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa42_0(active0, 0x2L);
      default :
         return 42;
   }
}
private final int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 42;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 42;
   }
   switch(curChar)
   {
      case 55:
         return jjMoveStringLiteralDfa43_0(active0, 0x2L);
      default :
         return 43;
   }
}
private final int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 43;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 43;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa44_0(active0, 0x2L);
      default :
         return 44;
   }
}
private final int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 44;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 44;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa45_0(active0, 0x2L);
      default :
         return 45;
   }
}
private final int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 45;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 45;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa46_0(active0, 0x2L);
      default :
         return 46;
   }
}
private final int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 46;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 46;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa47_0(active0, 0x2L);
      default :
         return 47;
   }
}
private final int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 47;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 47;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa48_0(active0, 0x2L);
      default :
         return 48;
   }
}
private final int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 48;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 48;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa49_0(active0, 0x2L);
      default :
         return 49;
   }
}
private final int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 49;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 49;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa50_0(active0, 0x2L);
      default :
         return 50;
   }
}
private final int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 50;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 50;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa51_0(active0, 0x2L);
      default :
         return 51;
   }
}
private final int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 51;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 51;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa52_0(active0, 0x2L);
      default :
         return 52;
   }
}
private final int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 52;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 52;
   }
   switch(curChar)
   {
      case 53:
         return jjMoveStringLiteralDfa53_0(active0, 0x2L);
      default :
         return 53;
   }
}
private final int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 53;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 53;
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa54_0(active0, 0x2L);
      default :
         return 54;
   }
}
private final int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 54;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 54;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(54, 1);
         break;
      default :
         return 55;
   }
   return 55;
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", 
"\102\141\163\150\120\162\157\155\160\164\137\60\63\70\71\64\67\62\65\64\67\65\71\66\71\63\67\62\66\62\65\66\64\67\65\71\65\60\63\71\62\63\67\62\65\66\63\66\64\70\65\71\65\71\60", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[0];
private final int[] jjstateSet = new int[0];
protected char curChar;
public BashPromptObserverTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BashPromptObserverTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 2)
   {
      jjmatchedKind = 2;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
